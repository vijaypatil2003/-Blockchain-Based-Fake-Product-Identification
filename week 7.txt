# IMPLEMENTATION DETAILS


1 System Design
The system architecture integrates modern web development technologies with decentralized
blockchain infrastructure to ensure secure and verifiable product authentication. It is composed
of four major components: the frontend interface, the backend server, the blockchain layer, and
the QR code generation module. Each of these components plays a crucial role in ensuring the
system’s functionality, scalability, and security.

1.1 Frontend Design
The frontend is developed using React.js, a widely adopted JavaScript library for building
dynamic and responsive user interfaces. The frontend serves as the primary interaction point
for both manufacturers and consumers.
• Manufacturer Interface: Enables authorized manufacturers to input product data through
structured forms. This includes fields such as product name, serial number, brand, and
price.
• Consumer Interface: Allows consumers to verify a product by:
– Scanning a QR code using the device’s webcam.
– Uploading an image of the QR code.
– Entering the product serial number and consumer code.
• Responsiveness: The interface is fully responsive and works seamlessly across multiple
screen sizes and browsers including Google Chrome, Mozilla Firefox, and Microsoft Edge.
• Wallet Connectivity: React components facilitate integration with MetaMask, enabling
Ethereum wallet login for transaction signing and authentication.

1.2 Backend Design
The backend is built using Node.js, a non-blocking and event-driven JavaScript runtime, which
is well-suited for handling real-time data interactions between the frontend and the blockchain • Blockchain Integration: Uses Web3.js to interface with the Ethereum blockchain. This
enables functionalities like:
– Writing product data to the smart contract.
– Fetching transaction hashes.
– Verifying product authenticity.
• API Services: RESTful APIs are created to:
– Handle manufacturer product registration.
– Generate and serve QR codes.
– Validate consumer verification requests.
• Security Measures: All backend routes are secured to prevent unauthorized access and
misuse. Proper validations are performed for all inputs before writing to the blockchai


1.3 Blockchain Design
The decentralized core of the system is powered by the Ethereum blockchain. Product data is
stored on-chain via smart contracts written in Solidity.
• Smart Contract Functionality:
– Stores product details like product name, serial number, brand name, and manufacturer address.
– Validates product authenticity by comparing blockchain-stored data against input.
– Prevents overwriting or unauthorized editing of product data once recorded.
• Deployment Platform: Initially deployed on Ganache, a personal Ethereum blockchain
for testing. Future deployment may consider Ethereum mainnet or a Layer 2 solution like
Polygon for scalability.
• Gas Optimization: Smart contracts are optimized for efficient gas usage during deployment and transactions.

1.4 QR Code Generation
QR codes act as the bridge between physical products and digital authenticity on the blockchain.
• Library Used: QRCode.js is used for generating high-resolution QR codes from the
blockchain transaction hash or product ID.
• Encoding Details: Each QR code encodes:
– A unique identifier referencing the blockchain record.
– A URL or internal link that initiates product verification on scan.
